name: Stage backend build and deploy

on:
  pull_request:
    branches:
      - develop
    types: [closed]
  push:
    branches:
      - feature/ci_cd
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lomaya_baryery_backend

jobs:
  build_and_push_lomaya_baryery_backend_image:
    name: Push Docker image to GitHub Packages
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set variables
        run: |
          echo REP_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:stage,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:latest,
            ${{ env.REGISTRY }}/${{ env.REP_OWNER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build_and_push_lomaya_baryery_backend_image
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: develop

      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo rm -f .env
            touch .env
            echo TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} >> .env
            sudo docker image prune -f
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/lomaya_baryery_backend:latest
            sudo docker-compose stop
            sudo docker-compose rm backend -f
            sudo docker-compose up -d

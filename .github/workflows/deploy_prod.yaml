name: Prod backend build and deploy

on:
  pull_request:
    branches:
      - develop
    types: [ closed ]

defaults:
  run:
    working-directory: .

jobs:
  build_and_push_docker_image:
    name: Push Docker image to GitHub Packages
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment:
      name: prod_deploy

    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Docker login
        uses: docker/login-action@v1
        with:
          registry: ${{ vars.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          labels: runnumber=${GITHUB_RUN_ID}
          push: true
          tags: |
            ${{ vars.REGISTRY }}/${{ vars.REP_OWNER }}/${{ vars.IMAGE_NAME }}:prod,
            ${{ vars.REGISTRY }}/${{ vars.REP_OWNER }}/${{ vars.IMAGE_NAME }}:${{ github.sha }}

  start_application:
    name: Start application
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    needs: build_and_push_docker_image
    environment:
      name: prod_deploy
    steps:
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Copy docker-compose and nginx files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.prod.yaml,nginx/default.prod.conf"
          target: ${{ vars.DEPLOY_PATH }}

      - name: Create .env file
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ vars.DEPLOY_PATH }}
            mv docker-compose.prod.yaml docker-compose.yaml
            mv nginx/default.prod.conf nginx/default.conf
            rm -f .env
            touch .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            echo BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }} >> .env
            echo BOT_WEBHOOK_MODE=${{ vars.BOT_WEBHOOK_MODE }} >> .env
            echo APPLICATION_URL=${{ secrets.APPLICATION_URL }} >> .env
            echo HEALTHCHECK_API_URL=${{ secrets.HEALTHCHECK_API_URL }} >> .env
            echo MAIL_LOGIN=${{ secrets.MAIL_LOGIN }} >> .env
            echo MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} >> .env
            echo ORGANIZATIONS_EMAIL=${{ secrets.ORGANIZATIONS_EMAIL }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo ROOT_PATH=${{ vars.ROOT_PATH }} >> .env
            echo TZ=${{ vars.TZ }} >> .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env

      - name: Start application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ vars.DEPLOY_PATH }}
            docker image prune -f
            docker pull  ${{ vars.REGISTRY }}/${{ vars.REP_OWNER }}/${{ vars.IMAGE_NAME }}:prod
            docker compose --file docker-compose.yaml stop
            docker compose --file docker-compose.yaml rm backend
            docker compose --file docker-compose.yaml up -d

      - name: Making migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            cd ${{ vars.DEPLOY_PATH }}
            docker compose exec -T -w ${{ vars.WORK_DIR }} backend alembic upgrade head

      - name: Sleep for 30 seconds
        run: sleep 30s
        shell: bash

      - name: Get the status of healthcheck
        uses: im-open/url-status-check@v1.1.0
        with:
          url: ${{ vars.HEALTHCHECK_URL }}
          fail-on-bad-status: true
